/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#pragma once

#include <string>

namespace OT
{
    /**
    * \class Filler Filler.h
    * An object that fills a string by replacing a specific token with a filler
    * text.
    */
    class Filler
    {
    public:

        /**
        * Creates a new Filler for the given token.
        * @param[in] token The token to replace.
        */
        Filler(const std::string& token);

        /**
        * Creates a new Filler for the given token and filler text.
        * @param[in] token The token to replace.
        * @param[in] fillerText The text to replace the token with.
        */
        Filler(const std::string& token, const std::string& fillerText);

        /**
        * Defines the token to replace.
        * @param[in] token The token to replace.
        */
        void setToken(const std::string& token);

        /**
        * Defines the text to replace the token with.
        * @param[in] fillerText The text to replace the token with.
        */
        void setFillerText(const std::string& fillerText);

        /**
        * Replaces all occurrences of the token with the filler text in the string
        * passed in argument. The string is modified in place.
        * @param[in] textToFill The string to modify by replacing the token with the
        *   filler text. This string is passed by reference and modified in place.
        */
        void fill(std::string& textToFill) const;

    private:

        /**
        * Makes sure the token is not part of the filler text, since otherwise the
        * Filler will enter an infinite loop while trying to replace the token with
        * its filler text. If the token is found in the filler text, an invalid
        * argument exception will be thrown.
        */
        void checkForInfiniteLoop() const;

        /** The token to replace */
        std::string m_token;

        /** The text to replace the token with */
        std::string m_fillerText;
    };
}