/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2022, mlaasri
**
***********************************************************************/

#pragma once

#include <memory>
#include <vector>

#include "Generator.h"

namespace OT
{
    /**
    * \class Pipeline Pipeline.h
    * A generation Pipeline that builds an object by processing it one step at a
    * time.
    * 
    * A Pipeline consists of a sequence of processors that each completes or
    * modifies an object. For example, if the object is a type of Question, then a
    * Processor could replace tokens in its prompt by some text, or add some options
    * if it is a MultipleChoiceQuestion. Once an object traverses a Pipeline, it
    * ends up in its final state and is ready to be used.
    */
    template<class ObjectType>
    class Pipeline
    {
    public:

        /**
        * \struct Processor Pipeline.h
        * A processing unit that is part of a generation Pipeline and that aims at
        * completing or modifying an existing object.
        */
        struct Processor
        {
            /**
            * Processes the object given in argument. This method must be
            * implemented in all classes derived from Processor.
            * @param[out] object The object to process. This object is meant to be
            *   modified by this method.
            */
            virtual void process(ObjectType& object) const = 0;
        };

        /**
        * Adds a Processor at the end of the Pipeline.
        * 
        * Note that the pointer given in argument will be moved to the Pipeline's
        * internal storage, so it should not be accessed anymore after this method
        * is called.
        * @param[in] processor A pointer to the Processor to add. The pointer will
        *   be moved inside the Pipeline by this method, so it should not be
        *   accessed anymore after this method is called.
        */
        void append(std::unique_ptr<Processor> processor);

        /**
        * Passes the object given in argument throughout the whole pipeline, calling
        * one Processor at a time in the order in which they were inserted with the
        * append() method.
        * @param[in] object The object to process. This object is meant to be
        *   modified by this method.
        */
        void process(ObjectType& object) const;

    private:

        /** The sequence of processors constituting the Pipeline */
        std::vector<std::unique_ptr<Processor>> m_processors;
    };

    template<class ObjectType>
    inline void Pipeline<ObjectType>::append(std::unique_ptr<Processor> processor)
    {
        /* We move the pointer into the Pipeline's internal storage */
        m_processors.push_back(std::move(processor));
    }

    template<class ObjectType>
    inline void Pipeline<ObjectType>::process(ObjectType& object) const
    {
        /* We pass the object throughout the processing pipeline */
        for (const auto& processor : m_processors)
            processor->process(object);
    }
}