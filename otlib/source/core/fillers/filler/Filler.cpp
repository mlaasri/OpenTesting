/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#include <stdexcept>

#include "Filler.h"
#include "../../../utility/String.h"

OT::Filler::Filler(const std::string& token) :
    Filler(token, "<NO FILLER TEXT>")
{}

OT::Filler::Filler(const std::string& token, const std::string& fillerText) :
    m_token(token),
    m_fillerText(fillerText)
{
    /* We check if the pair token/filler text will not trigger an infinite loop */
    checkForInfiniteLoop();
}

void OT::Filler::setToken(const std::string& token)
{
    /* We first update the token */
    m_token = token;

    /*
    * And then we check if the new pair token/filler text will not trigger an
    * infinite loop:
    */
    checkForInfiniteLoop();
}

void OT::Filler::setFillerText(const std::string& fillerText)
{
    /* We first update the filler text */
    m_fillerText = fillerText;

    /*
    * And then we check if the new pair token/filler text will not trigger an
    * infinite loop:
    */
    checkForInfiniteLoop();
}

void OT::Filler::fill(std::string& textToFill) const
{
    // We replace all occurrences of the token with the filler text
    String::replaceAll(textToFill, m_token, m_fillerText);
}

void OT::Filler::checkForInfiniteLoop() const
{
    /*
    * We make sure the token is not part of the filler text, since otherwise the
    * Filler will enter an infinite loop while trying to replace the token with its
    * filler text.
    */
    if (String::contains(m_fillerText, m_token))
        throw std::invalid_argument("Filler text '" + m_fillerText + "' cannot contain token '" + m_token + "'.");
}
