/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#include <algorithm>
#include <stdexcept>

#include "Bucket.h"

OT::Bucket::Bucket(std::vector<std::string> words) :
    m_words(words)
{}

std::vector<std::string> OT::Bucket::getWords() const
{
    return m_words;
}

std::vector<std::string> OT::Bucket::getKeys() const
{
    return m_keys;
}

size_t OT::Bucket::getNumKeys() const
{
    return m_keys.size();
}

size_t OT::Bucket::getSize() const
{
    return m_words.size();
}

std::string OT::Bucket::generate(const std::string& key) const
{
    return m_words[std::stoi(key)];
}

void OT::Bucket::add(const std::string& word)
{
    m_words.push_back(word);
    updateKeys();
}

void OT::Bucket::remove(const std::string& word)
{
    auto it = std::find(m_words.cbegin(), m_words.cend(), word);
    if (it == m_words.cend())
        throw std::invalid_argument("Word '" + word + "' is not in bucket and cannot be removed.");
    m_words.erase(it);
    updateKeys();
}

void OT::Bucket::clear()
{
    m_words.clear();
    updateKeys();
}

void OT::Bucket::updateKeys()
{
    m_keys.resize(m_words.size());
    for (int i = 0; i < m_words.size(); i++)
        m_keys[i] = std::to_string(i);
}