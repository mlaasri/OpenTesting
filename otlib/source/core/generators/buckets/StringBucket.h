/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#pragma once

#include "../../engine/Generator.h"

namespace OT
{
    /**
    * \class StringBucket StringBucket.h
    * A bucket of phrases to pick from.
    */
    class StringBucket :
        public Generator<std::string>
    {
    public:

        /**
        * Creates a StringBucket from a list of phrases.
        * @param[in] phrases The phrases to start with in the bucket.
        */
        StringBucket(std::vector<std::string> phrases = std::vector<std::string>());

        /**
        * Returns the phrases contained in the bucket.
        */
        std::vector<std::string> getPhrases() const;

        /**
        * Returns the list of keys supported by the generator.
        */
        std::vector<std::string> getKeys() const;

        /**
        * Returns the number of keys supported by the generator.
        */
        size_t getNumKeys() const override;

        /**
        * Returns the number of phrases in the bucket.
        */
        size_t getSize() const;

        /**
        * Picks a phrase from the bucket.
        * @param[in] key The key to use to pick the phrase. It must be an integer
        *   represented as a string, and the integer must be non-negative and less
        *   than the size of the bucket.
        */
        std::string generate(const std::string& key) const;

        /**
        * Adds a phrase to the bucket.
        * @param[in] phrase The phrase to add.
        */
        void add(const std::string& phrase);

        /**
        * Removes a phrase from the bucket.  If the phrase is not in the bucket, an
        * invalid argument exception is thrown.
        * @param[in] phrase The phrase to remove.
        */
        void remove(const std::string& phrase);

        /**
        * Empties the bucket.
        */
        void clear();

    protected:

        /**
        * Regenerates the keys based on the phrases contained in the bucket.
        */
        void updateKeys();

    private:

        /**
        * The phrases contained in the bucket.
        */
        std::vector<std::string> m_phrases;

        /**
        * The keys corresponding to each phrase in the bucket.
        */
        std::vector<std::string> m_keys;
    };
}