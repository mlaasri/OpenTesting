/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2022, mlaasri
**
***********************************************************************/

#pragma once

#include <memory>

#include "../questions/question/Question.h"
#include "../../engine/Generator.h"

namespace OT
{
    /**
    * \class GenericQuestionGenerator GenericQuestionGenerator.h
    * An object that generates a Question and returns a pointer to it, in the form
    * of a pointer to the most generic Question type, hence the name.
    */
    class GenericQuestionGenerator :
        public Generator<std::unique_ptr<Question>>
    {
    public:

        /**
        * Generates a Question and then casts it to the desired type. If the
        * Question generated could not be converted to the desired type, then this
        * method will return a null pointer.
        * 
        * Note that casting is not compatible with exclusive ownership, so this
        * method returns a shared pointer instead of a unique pointer.
        * @param[in] key The key to use to generate the Question.
        */
        template<class QuestionType>
        std::shared_ptr<QuestionType> generateAndCast(const std::string& key) const;
    };

    template<class QuestionType>
    inline std::shared_ptr<QuestionType> GenericQuestionGenerator::generateAndCast(const std::string& key) const
    {
        /* We generate the question */
        std::unique_ptr<Question> question = generate(key);

        /* We turn the unique pointer into a shared pointer for dynamic casting */
        std::shared_ptr<Question> questionToCast = std::move(question);

        /* And finally we return the result of the casting operation */
        return std::dynamic_pointer_cast<QuestionType>(questionToCast);
    }
}