/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#include "ExplanationCompletionUnit.h"
#include "../../../config/SpecialKeys.h"

OT::ExplanationCompletionUnit::Processor::Processor(const std::string& explanationChunk) :

    /* We just copy the explanation chunk to use for completion */
    m_explanationChunk(explanationChunk)
{}

const std::string& OT::ExplanationCompletionUnit::Processor::getExplanationChunk() const
{
    return m_explanationChunk;
}

void OT::ExplanationCompletionUnit::Processor::process(Question& question) const
{
    /*
    * We append the explanation chunk at the end of the question's explanation
    * field.
    */
    question.explanation += m_explanationChunk;
}

OT::ExplanationCompletionUnit::KeyContainerTypeValue OT::ExplanationCompletionUnit::getKeys() const
{
    /* The unit always supports the single key and the single key only */
    return { OPENTESTING_SINGLE_KEY };
}

size_t OT::ExplanationCompletionUnit::getNumKeys() const
{
    /* The unit always supports the single key and the single key only */
    return 1;
}

std::unique_ptr<OT::Pipeline<OT::Question>::Processor> OT::ExplanationCompletionUnit::generate(const std::string& key) const
{
    /*
    * We do not enforce the constraint that the key must be equal to the single key.
    * Instead, we simply ignore the key and always return the appropriate
    * ExplanationCompletionUnit::Processor.
    */
    return std::make_unique<Processor>(m_explanationChunk);
}

const std::string& OT::ExplanationCompletionUnit::getExplanationChunk() const
{
    return m_explanationChunk;
}

void OT::ExplanationCompletionUnit::setExplanationChunk(const std::string& explanationChunk)
{
    m_explanationChunk = explanationChunk;
}

void OT::ExplanationCompletionUnit::serialize(Writer& writer) const
{
    writer.write("type", std::string("ExplanationCompletionUnit"));
    writer.write("explanationChunk", m_explanationChunk);
}

void OT::ExplanationCompletionUnit::deserialize(const Reader& reader)
{
    m_explanationChunk = reader.read<std::string>("explanationChunk");
}
