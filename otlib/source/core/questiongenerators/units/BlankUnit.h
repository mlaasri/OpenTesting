/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#pragma once

#include "../questions/MultipleChoiceQuestion.h"
#include "../../engine/Factory.h"
#include "TokenReplacementUnit.h"
#include "OptionSelectionUnit.h"

namespace OT
{
    /**
    * \class BlankUnit BlankUnit.h
    * A Factory::Unit that adds a blank to the prompt of a MultipleChoiceQuestion
    * and selects the options to present to the examinee for completing the blank.
    * 
    * Internally, the unit is just a combination of a TokenReplacementUnit and an
    * OptionSelectionUnit. The TokenReplacementUnit adds the blank to the prompt
    * using its token replacement mechanism while the OptionSelectionUnit selects
    * the options for filling it and groups them into a
    * MultipleChoiceQuestion::OptionGroup.
    * 
    * The unit relies on three parameters: a blank identifier, a boolean flag for
    * toggling the display of the blank identifier, and a blank symbol. Each of
    * these parameters can be changed at runtime. The blank identifier is a string
    * that should uniquely identify the blank within a question (e.g. a number or a
    * letter) and that the examinee can use to map a blank to its corresponding
    * options when there are multiple blanks in the same question. The flag is a
    * boolean indicating whether the blank identifier should be shown or hidden from
    * the examinee, for example if not necessary because there is only one blank in
    * the question or there is no ambiguity regarding the correspondence between
    * blanks and options. The blank symbol is a string that acts as a placeholder
    * for the missing word or expression in the prompt (e.g. "_________"). 
    * 
    * These three parameters define how the blank will appear in the prompt and how
    * it will be referred to in the MultipleChoiceQuestion::OptionGroup. If the flag
    * is set to true (i.e. show the identifier), the blank is added to the prompt as
    * a string of the form "([identifier])[symbol]" and the title of the
    * MultipleChoiceQuestion::OptionGroup is set to "Blank ([identifier])" where
    * [identifier] is the blank identifier and [symbol] is the blank symbol. If the
    * flag is set to false, the identifier will be hidden so the blank will be shown
    * as "[symbol]" and the title of the MultipleChoiceQuestion::OptionGroup will
    * just be "Blank".
    * 
    * For example, if the identifier is "i", the symbol is "_________", and the flag
    * is set to true, then the blank will be shown as "(i)_________" in the prompt
    * and the title of the MultipleChoiceQuestion::OptionGroup will be "Blank (i)".
    * If the flag is set to false, then the blank will be shown as "_________" and
    * the title of the MultipleChoiceQuestion::OptionGroup will be "Blank".
    */
    class BlankUnit :
        public Factory<MultipleChoiceQuestion>::Unit
    {
    public:

        /**
        * \class Processor BlankUnit.h
        * A Pipeline::Processor object that replaces tokens with a blank in a
        * question's prompt and adds options to the question for completing the
        * blank.
        * 
        * The processor just chains a TokenReplacementUnit::Processor with an
        * OptionSelectionUnit::Processor which are both generated by the BlankUnit's
        * internal units.
        */
        class Processor :
            public Pipeline<MultipleChoiceQuestion>::Processor
        {
        public:

            /**
            * Creates a Processor that will replace any occurrence of the given
            * tokens with a blank in the question's prompt and add the given options
            * and correct answers to the question.
            * @param[in] promptProcessor The processor to call for replacing the
            *   tokens with the blank.
            * @param[in] optionProcessor The processor to call for adding options
            *   and correct answers to the question.
            */
            Processor(const TokenReplacementUnit::Processor& promptProcessor, const OptionSelectionUnit::Processor& optionProcessor);

            /**
            * Replaces any occurrence of the supported tokens with a blank inside
            * the question's prompt and adds the selected options to the question.
            * @param[out] question The multiple choice question to add the blank and
            *   options to.
            */
            void process(MultipleChoiceQuestion& question) const override;

        private:

            /**
            * The internal processor in charge of adding the blank to the prompt.
            */
            TokenReplacementUnit::Processor m_promptProcessor;

            /**
            * The internal processor in charge of adding options to a question for
            * completing the blank.
            */
            OptionSelectionUnit::Processor m_optionProcessor;
        };

        /**
        * Creates an empty BlankUnit with an empty identifier, a boolean flag for
        * showing the identifier set to false, and a blank symbol set to
        * OpenTesting's default blank symbol.
        */
        BlankUnit();

        /**
        * Creates a BlankUnit with the given blank identifier, a boolean flag for
        * showing the identifier set to true, and a blank symbol set to
        * OpenTesting's default blank symbol.
        * @param[in] identifier The identifier to use for the blank.
        */
        BlankUnit(const std::string& identifier);

        /**
        * Returns the set of keys supported by the unit, which is exactly the same
        * set of keys as that supported by the internal OptionSelectionUnit. See the
        * documentation of the OptionSelectionUnit::getKeys() method for more
        * information on the supported format and values.
        */
        std::set<std::string> getKeys() const override;

        /** Returns the number of keys supported by the unit. */
        size_t getNumKeys() const override;

        /**
        * Generates a BlankUnit::Processor that can add a blank to a multiple choice
        * question.
        * 
        * The key must either be the null key or a valid key for the internal
        * OptionSelectionUnit. If the key is the null key, this method will simply
        * generate an InactiveProcessor. Otherwise, the key will be directly passed
        * to the internal OptionSelectionUnit to select correct and incorrect
        * options. In this case, the key must respect the format defined in the
        * documentation of the OptionSelectionUnit::getKeys() method. If it does
        * not, this method will likely throw an exception.
        * @param[in] key The key to pass to the OptionSelectionUnit. It must either
        *   be the null key or respect the format defined in the documentation of
        *   the OptionSelectionUnit::getKeys() method.
        */
        std::unique_ptr<Pipeline<MultipleChoiceQuestion>::Processor> generate(const std::string& key) const override;

        /** Returns the blank identifier. */
        const std::string& getBlankIdentifier() const;

        /**
        * Returns the boolean flag indicating whether the blank identifier should be
        * shown (true) or hidden (false) from the examinee.
        */
        bool shouldShowBlankIdentifier() const;

        /** Returns the blank symbol. */
        const std::string& getBlankSymbol() const;

        /**
        * Returns the internal TokenReplacementUnit holding the tokens to replace
        * with the blank symbol.
        */
        const TokenReplacementUnit& getTokenReplacementUnit();

        /**
        * Returns the internal OptionSelectionUnit holding the options to choose
        * from.
        */
        const OptionSelectionUnit& getOptionSelectionUnit();

        /**
        * Sets the blank identifier.
        * @param[in] identifier The blank identifier to use.
        */
        void setBlankIdentifier(const std::string& identifier);

        /**
        * Requests that the blank identifier is shown to the examinee in both the
        * prompt and MultipleChoiceQuestion::OptionGroup title.
        *
        * This method essentially toggles the unit's internal boolean flag for
        * showing the identifier to true.
        */
        void showBlankIdentifer();

        /**
        * Requests that the blank identifier is hidden from the examinee in both the
        * prompt and MultipleChoiceQuestion::OptionGroup title.
        *
        * This method essentially toggles the unit's internal boolean flag for
        * showing the identifier to false.
        */
        void hideBlankIdentifer();

        /**
        * Sets the blank symbol that signals that a word or expression is missing
        * from a prompt.
        * @param[in] symbol The blank symbol to use.
        */
        void setBlankSymbol(const std::string& symbol);

        /**
        * Adds a token to be replaced by a blank.
        * @param[in] token The token to add.
        */
        void addToken(const std::string& token);

        /**
        * Removes a token from the internal TokenReplacementUnit so it is no longer
        * replaced with a blank. If the token given in argument is not currently
        * supported by the unit, an invalid argument exception is thrown.
        * @param[in] token The token to remove.
        */
        void removeToken(const std::string& token);

        /**
        * Removes all tokens from the unit.
        */
        void clearTokens();

        /**
        * Adds the given option to the Bucket of correct options in the internal
        * OptionSelectionUnit.
        * @param[in] option The option to add as a correct option.
        */
        void appendCorrectOption(const std::string& option);

        /**
        * Adds the given option to the Bucket of incorrect options in the internal
        * OptionSelectionUnit.
        * @param[in] option The option to add as an incorrect option.
        */
        void appendIncorrectOption(const std::string& option);

        /**
        * Removes an option from the Bucket of correct options in the internal
        * OptionSelectionUnit. If the option given in argument is not currently in
        * the bucket, an invalid argument exception is thrown.
        * @param[in] option The option to remove.
        */
        void removeCorrectOption(const std::string& option);

        /**
        * Removes an option from the Bucket of incorrect options in the internal
        * OptionSelectionUnit. If the option given in argument is not currently in
        * the bucket, an invalid argument exception is thrown.
        * @param[in] option The option to remove.
        */
        void removeIncorrectOption(const std::string& option);

        /** Removes all correct options from the internal OptionSelectionUnit */
        void clearCorrectOptions();

        /** Removes all incorrect options from the internal OptionSelectionUnit */
        void clearIncorrectOptions();

        /**
        * Defines the correct selection size, i.e. the number of correct options to
        * select on each generation.
        *
        * The selection size given in argument must be at least 1. Otherwise, an
        * invalid argument exception is thrown. It should also be at most equal to
        * the number of options contained in the bucket of correct options in the
        * internal OptionSelectionUnit. Otherwise, the unit will only generate
        * InactiveProcessor objects that will have no effect on the questions they
        * receive.
        * @param[in] selectionSize The number of correct options to select on each
        *   generation. It must be at least 1.
        */
        void setCorrectSelectionSize(size_t selectionSize);

        /**
        * Defines the incorrect selection size, i.e. the number of incorrect options
        * to select on each generation.
        *
        * The selection size given in argument must be at least 1. Otherwise, an
        * invalid argument exception is thrown. It should also be at most equal to
        * the number of options contained in the bucket of incorrect options in the
        * internal OptionSelectionUnit. Otherwise, the unit will only generate
        * InactiveProcessor objects that will have no effect on the questions they
        * receive.
        * @param[in] selectionSize The number of incorrect options to select on each
        *   generation. It must be at least 1.
        */
        void setIncorrectSelectionSize(size_t selectionSize);

    protected:

        /**
        * Updates the unit's internal TokenReplacementUnit and OptionSelectionUnit
        * according to the unit's current state.
        * 
        * This method regenerates the TokenReplacementUnit's replacement string and
        * the OptionSelectionUnit's MultipleChoiceQuestion::OptionGroup title.
        */
        void updateUnits();

    private:

        /** The blank identifier */
        std::string m_blankIdentifier;

        /**
        * The boolean flag indicating whether the blank identifier should be shown
        * (true) or hidden (false) from the examinee.
        */
        bool m_showBlankIdentifier;

        /** The blank symbol */
        std::string m_blankSymbol;

        /**
        * The internal unit containing the tokens and the string to replace them
        * with. The unit contains exactly one single replacement string at all time.
        */
        TokenReplacementUnit m_tokenReplacementUnit;

        /**
        * The internal unit in charge of selecting the options for completing the
        * blank.
        */
        OptionSelectionUnit m_optionSelectionUnit;
    };
}