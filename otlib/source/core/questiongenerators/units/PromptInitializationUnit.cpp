/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#include "PromptInitializationUnit.h"
#include "InactiveProcessor.h"

OT::PromptInitializationUnit::Processor::Processor(const std::string& prompt) :

    /* We just copy the prompt to use for initialization */
    m_prompt(prompt)
{}

void OT::PromptInitializationUnit::Processor::process(Question& question) const
{
    /* We set the question's prompt to the internal one */
    question.prompt = m_prompt;
}

std::set<std::string> OT::PromptInitializationUnit::getKeys() const
{
    return m_bucket.getKeys();
}

size_t OT::PromptInitializationUnit::getNumKeys() const
{
    return m_bucket.getNumKeys();
}

std::unique_ptr<OT::Pipeline<OT::Question>::Processor> OT::PromptInitializationUnit::generate(const std::string& key) const
{
    /*
    * If we receive the null key, we generate an inactive processor so that
    * questions will be left untouched.
    */
    if (key == OPENTESTING_NULL_KEY)
        return std::make_unique<InactiveProcessor<OT::Question>>();

    /*
    * Otherwise, we pick a prompt from the bucket and return a
    * PromptInitializationUnit::Processor for it.
    */
    std::string prompt = m_bucket.generate(key).front();
    return std::make_unique<Processor>(prompt);
}

const std::vector<std::string>& OT::PromptInitializationUnit::getPrompts() const
{
    return m_bucket.getObjects();
}

size_t OT::PromptInitializationUnit::getSize() const
{
    return m_bucket.getSize();
}

void OT::PromptInitializationUnit::addPrompt(const std::string& prompt)
{
    m_bucket.append(prompt);
}

void OT::PromptInitializationUnit::removePrompt(const std::string& prompt)
{
    m_bucket.remove(prompt);
}

void OT::PromptInitializationUnit::clearPrompts()
{
    m_bucket.clear();
}