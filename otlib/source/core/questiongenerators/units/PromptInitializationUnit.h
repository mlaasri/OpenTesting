/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#pragma once

#include <string>
#include <vector>

#include "../questions/question/Question.h"
#include "../../engine/Factory.h"
#include "../../engine/Bucket.h"

namespace OT
{
    /**
    * \class PromptInitializationUnit PromptInitializationUnit.h
    * A Factory::Unit that selects a prompt from a list of prompts and initializes a
    * question with it.
    * 
    * The unit relies on a single Bucket containing all the possible prompts to
    * choose from. The unit passes its input key to its internal Bucket to choose a
    * prompt and then initializes a question with the selected prompt by the
    * intermediate of a PromptInitializationUnit::Processor.
    */
    class PromptInitializationUnit :
        public Factory<Question>::Unit
    {
    public:

        /**
        * \class Processor PromptInitializationUnit.h
        * A Pipeline::Processor object that initializes the prompt of a question.
        */
        class Processor :
            public Pipeline<Question>::Processor
        {
        public:

            /**
            * Creates a PromptInitializationUnit::Processor that will initialize the
            * prompt of a question with the given prompt.
            * @param[in] prompt The prompt to initialize the question with.
            */
            Processor(const std::string& prompt);

            /**
            * Initializes the question's prompt. Any existing prompt will be
            * overriden.
            * @param[out] question The question to initialize.
            */
            void process(Question& question) const override;

        private:

            /** The prompt to initialize a question with. */
            std::string m_prompt;
        };

        /**
        * Returns the set of keys supported by the unit.
        *
        * If the unit does not contain any prompt to choose from, the only key it
        * supports is the null key OPENTESTING_NULL_KEY ("N"). Otherwise, if the
        * unit contains at least one prompt, then the keys it supports are all the
        * strings representing a valid index between 0 and getSize() - 1 included,
        * i.e. "0", "1", "2", etc.
        */
        KeyContainerType getKeys() const override;

        /** Returns the number of keys supported by the unit. */
        size_t getNumKeys() const override;

        /**
        * Picks a prompt and generates a PromptInitializationUnit::Processor that
        * initializes questions with this prompt.
        * @param[in] key The key to use to pick the prompt. If the unit does not
        *   contain any prompt, the key must be equal to the null key
        *   OPENTESTING_NULL_KEY ("N"), in which case the unit will generate an
        *   InactiveProcessor that does not perform any operation. Otherwise, it
        *   must be a string representing a valid index between 0 and getSize() - 1
        *   included, e.g. "0", "1", "2", etc., in which case the unit will return
        *   a PromptInitializationUnit::Processor using the prompt at the given
        *   index in its internal Bucket for initializing questions.
        */
        std::unique_ptr<Pipeline<Question>::Processor> generate(const std::string& key) const override;

        /** Returns the prompts contained in the unit. */
        const std::vector<std::string>& getPrompts() const;

        /** Returns the number of prompts contained in the unit. */
        size_t getSize() const;

        /**
        * Adds a prompt to the unit.
        * @param[in] prompt The prompt to add.
        */
        void addPrompt(const std::string& prompt);

        /**
        * Removes a prompt from the unit. If the prompt given in argument is not
        * currently contained in the unit, an invalid argument exception is thrown.
        * @param[in] prompt The prompt to remove.
        */
        void removePrompt(const std::string& prompt);

        /** Removes all prompts from the unit. */
        void clearPrompts();

        /**
        * Serializes the unit with the given Writer.
        * @param[out] writer The writer to use to serialize the unit.
        */
        void serialize(Writer& writer) const override;

        /**
        * Deserializes the unit with the given Reader.
        * @param[in] reader The reader to use to deserialize the unit.
        */
        void deserialize(const Reader& reader) override;

    private:

        /** The bucket containing all possible prompts to choose from. */
        Bucket<std::string> m_bucket;
    };
}