/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#pragma once

#include "../questions/MultipleChoiceQuestion.h"
#include "../../engine/Pipeline.h"

namespace OT
{
    /**
    * \class InactiveProcessor InactiveProcessor.h
    * A Processor that is inactive and does not perform any operation.
    *
    * An InactiveProcessor usually serves as a placeholder in a Pipeline, for
    * example if a Factory::Unit is bypassed during generation.
    */
    template<class QuestionType>
    class InactiveProcessor :
        public Pipeline<QuestionType>::Processor
    {
    public:

        /**
        * Does not perform any operation and leaves the question object passed in
        * argument intact. This method just returns immediately.
        * @param[in] question A reference to a question object. The object will be
        *   left intact.
        */
        void process(QuestionType& question) const override {}
    };
}