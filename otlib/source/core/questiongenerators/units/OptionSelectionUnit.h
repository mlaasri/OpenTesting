/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#pragma once

#include <string>
#include <vector>

#include "../questions/MultipleChoiceQuestion.h"
#include "../../engine/Factory.h"
#include "../../engine/Bucket.h"

namespace OT
{
    /**
    * \class OptionSelectionUnit OptionSelectionUnit.h
    * A Factory::Unit that selects the options to present to the examinee when
    * answering a MultipleChoiceQuestion.
    * 
    * The unit relies on two internal buckets, one with correct options and one with
    * incorrect options. The unit selects options from these two buckets, groups all
    * of them into a MultipleChoiceQuestion::OptionGroup, adds a title to it, and
    * then shuffles it. The title is user-defined and can be changed at runtime. The
    * unit then adds the MultipleChoiceQuestion::OptionGroup to the
    * MultipleChoiceQuestion and the correct options to the list of correct answers
    * to the MultipleChoiceQuestion by the intermediate of an
    * OptionSelectionUnit::Processor.
    * 
    * Unless unable to do so, the unit will always select the same number of correct
    * options, which is called the "correct selection size", and the same number of
    * incorrect options, which is called the "incorrect selection size". Both
    * selection sizes must always be at least 1 and can be changed at runtime. The
    * sum of these two selection sizes is called the "total selection size".
    */
    class OptionSelectionUnit :
        public Factory<MultipleChoiceQuestion>::Unit
    {
    public:

        /**
        * \class Processor OptionSelectionUnit.h
        * A Pipeline::Processor object that adds options to a
        * MultipleChoiceQuestion.
        */
        class Processor :
            public Pipeline<MultipleChoiceQuestion>::Processor
        {
        public:

            /**
            * Creates an OptionSelectionUnit::Processor that will add the given
            * option group and correct answers to the multiple choice questions it
            * is instructed to process.
            * @param[in] optionGroup The option group to add.
            * @param[in] correctOptions The correct options to add as correct
            *   answers. Each correct option should be part of the option group,
            *   although this constraint is not enforced.
            */
            Processor(const MultipleChoiceQuestion::OptionGroup& optionGroup, const std::vector<std::string>& correctOptions);

            /**
            * Adds the MultipleChoiceQuestion::OptionGroup to the
            * MultipleChoiceQuestion and the correct options to the list of correct
            * answers to the MultipleChoiceQuestion. If the question has no correct
            * answers yet, the processor will create a new one and fill it with the
            * correct options. Otherwise, the processor will add the correct options
            * to each existing correct answer.
            * @param[in] question The multiple choice question to add options to.
            */
            void process(MultipleChoiceQuestion& question) const override;

        private:

            /** The group of options to add. */
            MultipleChoiceQuestion::OptionGroup m_optionGroup;

            /** The correct options to add to the list of correct answers. */
            std::vector<std::string> m_correctOptions;
        };

        /**
        * Creates an empty unit with an empty title and with the correct and
        * incorrect selection sizes both set to 1 by default.
        */
        OptionSelectionUnit();

        /**
        * Returns the set of keys supported by the unit.
        *
        * If any of the unit's buckets is empty or does not contain enough options
        * to choose from, then the unit is not usable, so the only key it supports
        * is the null key OPENTESTING_NULL_KEY ("N").
        *
        * On the other hand, if the unit contains enough options in both of its
        * buckets, then the keys it supports are all the strings respecting the
        * format "[correct_key]+[incorrect_key]![permutation_key]" where:
        * - [correct_key] is a valid key for the bucket of correct options;
        * - [incorrect_key] is a valid key for the bucket of incorrect options;
        * - [permutation_key] is a permutation of all indices between 0 and
        *   getTotalSelectionSize() - 1 delimited by the
        *   OPENTESTING_DELIMITER_BUCKET_KEY (".") character.
        * 
        * For example, if the buckets contain 1 correct and 2 incorrect options and
        * each bucket has a selection size of 1, then the unit supports exactly the
        * following keys:
        * - "0+0!0.1" (selects the first correct and incorrect options and leaves
        *   them in this order without performing any permutation)
        * - "0+0!1.0" (selects the first correct and incorrect options and switches
        *   their position by applying one permutation)
        * - "0+1!0.1" (selects the first correct and second incorrect options and
        *   leaves them in this order without performing any permutation)
        * - "0+1!1.0" (selects the first correct and second incorrect options and
        *   switches their position by applying one permutation)
        */
        std::set<std::string> getKeys() const override;

        /** Returns the number of keys supported by the unit. */
        size_t getNumKeys() const override;

        /**
        * Selects correct and incorrect options from the corresponding buckets and
        * generates an OptionSelectionUnit::Processor that adds these options to
        * multiple choice questions.
        * 
        * The key must respect the format defined in the documentation of the
        * getKeys() method. If it does not, this method is likely to throw an
        * exception. 
        * @param[in] key The key to use for picking the correct and incorrect
        *   options and shuffling them. If any of the unit's buckets is empty or
        *   does not contain enough options to choose from, the key must be equal to
        *   the null key OPENTESTING_NULL_KEY ("N"), in which case the unit will
        *   generate an InactiveProcessor that does not perform any operation.
        *   Otherwise, it must be a string respecting the format defined in the
        *   documentation of the getKeys() method, in which case the unit will
        *   return an appropriate OptionSelectionUnit::Processor for these options.
        */
        std::unique_ptr<Pipeline<MultipleChoiceQuestion>::Processor> generate(const std::string& key) const override;

        /**
        * Returns the title that the unit will give to the generated
        * MultipleChoiceQuestion::OptionGroup.
        */
        const std::string& getTitle() const;

        /**
        * Returns the correct selection size, i.e. the number of correct options to
        * select on each generation.
        */
        size_t getCorrectSelectionSize() const;

        /**
        * Returns the incorrect selection size, i.e. the number of incorrect options
        * to select on each generation.
        */
        size_t getIncorrectSelectionSize() const;

        /**
        * Returns the total selection size, i.e. the total number of options to
        * select (both correct and incorrect) on each generation.
        */
        size_t getTotalSelectionSize() const;

        /**
        * Sets the title that the unit will give to the generated
        * MultipleChoiceQuestion::OptionGroup.
        * @param[in] title The title to give to the
        *   MultipleChoiceQuestion::OptionGroup.
        */
        void setTitle(const std::string& title);

        /**
        * Adds the given option to the Bucket of correct options.
        * @param[in] option The option to add as a correct option.
        */
        void appendCorrectOption(const std::string& option);

        /**
        * Adds the given option to the Bucket of incorrect options.
        * @param[in] option The option to add as an incorrect option.
        */
        void appendIncorrectOption(const std::string& option);

        /**
        * Removes an option from the Bucket of correct options. If the option given
        * in argument is not currently in the bucket, an invalid argument exception
        * is thrown.
        * @param[in] option The option to remove.
        */
        void removeCorrectOption(const std::string& option);

        /**
        * Removes an option from the Bucket of incorrect options. If the option
        * given in argument is not currently in the bucket, an invalid argument
        * exception is thrown.
        * @param[in] option The option to remove.
        */
        void removeIncorrectOption(const std::string& option);

        /** Removes all correct options from the unit */
        void clearCorrectOptions();

        /** Removes all incorrect options from the unit */
        void clearIncorrectOptions();

        /**
        * Defines the correct selection size, i.e. the number of correct options to
        * select on each generation.
        * 
        * The selection size given in argument must be at least 1. Otherwise, an
        * invalid argument exception is thrown. It should also be at most equal to
        * the number of options contained in the bucket of correct options.
        * Otherwise, the unit will only generate InactiveProcessor objects that will
        * have no effect on the questions they receive.
        * @param[in] selectionSize The number of correct options to select on each
        *   generation. It must be at least 1.
        */
        void setCorrectSelectionSize(size_t selectionSize);

        /**
        * Defines the incorrect selection size, i.e. the number of incorrect options
        * to select on each generation.
        *
        * The selection size given in argument must be at least 1. Otherwise, an
        * invalid argument exception is thrown. It should also be at most equal to
        * the number of options contained in the bucket of incorrect options.
        * Otherwise, the unit will only generate InactiveProcessor objects that will
        * have no effect on the questions they receive.
        * @param[in] selectionSize The number of incorrect options to select on each
        *   generation. It must be at least 1.
        */
        void setIncorrectSelectionSize(size_t selectionSize);

    protected:

        /**
        * Regenerates the keys based on the objects contained in the unit's buckets.
        */
        void updateKeys();

    private:

        /** The title for the MultipleChoiceQuestion::OptionGroup */
        std::string m_title;

        /** The Bucket containing all possible correct options. */
        Bucket<std::string> m_correctOptions;

        /** The Bucket containing all possible incorrect options. */
        Bucket<std::string> m_incorrectOptions;

        /** The keys supported by the unit in its current state. */
        std::set<std::string> m_keys;
    };
}