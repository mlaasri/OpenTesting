/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#pragma once

#include <string>
#include <vector>

#include "../questions/question/Question.h"
#include "../../engine/Factory.h"
#include "../../engine/Bucket.h"

namespace OT
{
    /**
    * \class ExplanationCompletionUnit ExplanationCompletionUnit.h
    * A Factory::Unit that completes the explanation field of a question.
    * 
    * The unit relies on a single string called the "explanation chunk" which
    * provides some information to the examinee on why a question's correct answers
    * are what they are. The unit appends the explanation chunk at the end of a
    * question's explanation field by the intermediate of an
    * ExplanationCompletionUnit::Processor. The current explanation and the chunk
    * are directly concatenated without any separator.
    * 
    * The unit only supports the single key, which is a string defined by the macro
    * OPENTESTING_SINGLE_KEY (which evaluates to "S").
    */
    class ExplanationCompletionUnit :
        public Factory<Question>::Unit
    {
    public:

        /**
        * \class Processor ExplanationCompletionUnit.h
        * A Pipeline::Processor object that completes the explanation field of a
        * question by appending an explanation chunk at the end of it.
        */
        class Processor :
            public Pipeline<Question>::Processor
        {
        public:

            /**
            * Creates an ExplanationCompletionUnit::Processor that will complete the
            * explanation field of a question by appending the explanation chunk
            * given in argument at the end of it.
            * @param[in] explanationChunk The explanation chunk to add to questions.
            */
            Processor(const std::string& explanationChunk);

            /**
            * Returns the explanation chunk the processor will add.
            */
            const std::string& getExplanationChunk() const;

            /**
            * Appends the explanation chunk at the end of the question's explanation
            * field. The two strings (the current explanation and the chunk) are
            * directly concatenated without any separator.
            * @param[out] question The question to add the explanation chunk to.
            */
            void process(Question& question) const override;

        private:

            /** The explanation chunk to add to a question */
            std::string m_explanationChunk;
        };

        /**
        * Returns a set containing the single key, which is the only key supported
        * by the unit. The single key is defined by the macro OPENTESTING_SINGLE_KEY
        * (which evaluates to "S").
        */
        KeyContainerType getKeys() const override;

        /** Returns the number of keys supported by the unit, i.e. 1. */
        size_t getNumKeys() const override;

        /**
        * Generates a ExplanationCompletionUnit::Processor that appends the
        * explanation chunk at the end of the explanation field of a question.
        * @param[in] key The key to use for the generation. It must be equal to the
        *   single key OPENTESTING_SINGLE_KEY ("S").
        */
        std::unique_ptr<Pipeline<Question>::Processor> generate(const std::string& key) const override;

        /** Returns the explanation chunk. */
        const std::string& getExplanationChunk() const;

        /**
        * Sets the explanation chunk.
        * @param[in] explanationChunk The explanation chunk to use.
        */
        void setExplanationChunk(const std::string& explanationChunk);

        /**
        * Serializes the unit with the given Writer.
        * @param[out] writer The writer to use to serialize the unit.
        */
        void serialize(Writer& writer) const override;

        /**
        * Deserializes the unit with the given Reader.
        * @param[in] reader The reader to use to deserialize the unit.
        */
        void deserialize(const Reader& reader) override;

    private:

        /** The explanation chunk to use for completing explanation fields */
        std::string m_explanationChunk;
    };
}