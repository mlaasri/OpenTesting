/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#pragma once

#include <string>
#include <memory>

#include "../questions/MultipleChoiceQuestion.h"
#include "../../engine/Factory.h"

namespace OT
{
    /**
    * \class TokenReplacementUnit TokenReplacementUnit.h
    * A Factory::Unit that aims at filling a question's prompt and its explanation
    * field through a token replacement mechanism.
    * 
    * The unit relies on a set of tokens and a list of replacement strings. The unit
    * uses its input key to choose a replacement string and then replaces any
    * occurrence of any of the tokens with this replacement string by the
    * intermediate of a ReplacementProcessor.
    */
    class TokenReplacementUnit :
        public Factory<OT::MultipleChoiceQuestion>::Unit
    {
    public:

        /**
        * \class ReplacementProcessor StringBucket.h
        * A Pipeline::Processor object that fills the prompt and explanation fields
        * of a question by replacing some tokens with a replacement string.
        */
        class ReplacementProcessor :
            public Pipeline<MultipleChoiceQuestion>::Processor
        {
        public:

            /**
            * Creates a ReplacementProcessor that will replace any occurrence of the
            * given tokens by the replacement string.
            * @param[in] tokens The tokens to replace.
            * @param[in] replacementString The string to replace the tokens with.
            */
            ReplacementProcessor(const std::vector<std::string>& tokens, const std::string& replacementString);

            /**
            * Replaces any occurrence of the supported tokens with the replacement
            * string inside the question's prompt and explanation fields.
            * @param[in] question The question to perform the replacement on.
            */
            void process(MultipleChoiceQuestion& question) const override;

        private:

            /** The tokens to replace. */
            std::vector<std::string> m_tokens;

            /** The string to replace the tokens with. */
            std::string m_replacementString;
        };

        /**
        * Returns the set of keys supported by the unit.
        *
        * If the unit does not contain any replacement string or has no registered
        * token, then it is not usable, so the only key it supports is the null key
        * "N".
        * 
        * On the other hand, if the unit contains at least one replacement string
        * and one token to replace, then the keys it supports are all the strings
        * representing a valid index between 0 and getSize() - 1 included, i.e. "0",
        * "1", "2", etc.
        */
        std::vector<std::string> getKeys() const;

        /**
        * Returns the number of keys supported by the unit.
        */
        size_t getNumKeys() const override;

        /**
        * Picks a replacement string and generates a Pipeline::Processor that
        * replaces all registered tokens with this string.
        * @param[in] key The key to use to pick the replacement string. If the unit
        *   does not contain any replacement string or has no registered token, then
        *   it is not usable, so the key must be equal to the null key "N", in which
        *   case the unit will generate an InactiveProcessor that does not perform
        *   any operation. Otherwise, it must be a string representing a valid index
        *   between 0 and getSize() - 1 included, e.g. "0", "1", "2", etc., in which
        *   case the unit will return an appropriate ReplacementProcessor that uses
        *   that string.
        */
        std::unique_ptr<Pipeline<MultipleChoiceQuestion>::Processor> generate(const std::string& key) const;

        /**
        * Returns all the tokens handled by the unit.
        */
        const std::vector<std::string>& getTokens() const;

        /**
        * Returns the replacement strings contained in the unit.
        */
        const std::vector<std::string>& getStrings() const;

        /**
        * Returns the number of replacement strings in the unit.
        */
        size_t getSize() const;

        /**
        * Adds a token to be used for replacement by the unit.
        * @param[in] token The token to add.
        */
        void addToken(const std::string& token);

        /**
        * Removes a token from the unit so the latter no longer handles it. If the
        * token given in argument is not currently supported by the unit, an invalid
        * argument exception is thrown.
        * @param[in] token The token to remove.
        */
        void removeToken(const std::string& token);

        /**
        * Removes all tokens from the unit.
        */
        void clearTokens();

        /**
        * Adds a replacement string to the unit.
        * @param[in] stringToAdd The string to add.
        */
        void addString(const std::string& stringToAdd);

        /**
        * Removes a replacement string from the unit. If the string given in
        * argument is not currently a replacement string in the unit, an invalid
        * argument exception is thrown.
        * @param[in] stringToRemove The string to remove.
        */
        void removeString(const std::string& stringToRemove);

        /**
        * Removes all replacement strings from the unit.
        */
        void clearStrings();

    protected:

        /**
        * Regenerates the keys based on the tokens and replacement strings handled
        * by the unit.
        */
        void updateKeys();

        /**
        * Makes sure that no token appear in no replacement string, since otherwise
        * the ReplacementProcessor could enter an infinite loop while trying to
        * replace the token with this replacement string. If at least one token is
        * found in at least one of the replacement strings, an invalid argument
        * exception is thrown.
        */
        void checkForInfiniteLoop() const;

    private:

        /** The tokens registered for the unit. */
        std::vector<std::string> m_tokens;

        /** The strings contained in the unit. */
        std::vector<std::string> m_strings;

        /** The keys supported by the unit in its current state. */
        std::vector<std::string> m_keys;
    };
}