/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#pragma once

#include <string>
#include <vector>

#include "question/Question.h"

namespace OT
{
    /**
    * \struct MultipleChoiceQuestion MultipleChoiceQuestion.h
    * A type of Question where multiple options to choose from are presented to the
    * examinee.
    */
    struct MultipleChoiceQuestion :
        public Question
    {
        /**
        * \struct Option MultipleChoiceQuestion.h
        * An Option that can be chosen by the examinee to answer the question.
        */
        struct Option
        {
            /**
            * An identifier to refer to the Option. It must be unique within the
            * scope of the MultipleChoiceQuestion the Option belongs to.
            * 
            * The identifier may be made visible to the examinee, so it must be
            * simple. Typically, this can be a letter (option 'A', option 'B', etc.)
            * or a number (option '1', option '2', etc.).
            */
            std::string identifier;

            /**
            * The actual value of the option that the examinee has to decide upon.
            * 
            * For a multiple choice question, it would make sense for the value to
            * be one element of at least one of the correct answers, but this
            * constraint is not enforced.
            */
            std::string value;
        };

        /** The options to choose from */
        std::vector<Option> options;

        /** Builds an empty MultipleChoiceQuestion */
        MultipleChoiceQuestion();

        /**
        * Builds a MultipleChoiceQuestion with a single correct answer.
        * @param[in] prompt The prompt to show the examinee.
        * @param[in] options The options for the examinee to choose from.
        * @param[in] correctAnswer The correct answer to the Question.
        * @param[in] explanation The reason why the correct answer is the one given.
        */
        MultipleChoiceQuestion(const std::string& prompt, const std::vector<Option>& options, const Answer& correctAnswer, const std::string& explanation);

        /**
        * Builds a MultipleChoiceQuestion with multiple correct answers
        * @param[in] prompt The prompt to show the examinee.
        * @param[in] options The options for the examinee to choose from.
        * @param[in] correctAnswers The correct answers to the Question.
        * @param[in] explanation The reason why the correct answers are the ones
        *   given.
        */
        MultipleChoiceQuestion(const std::string& prompt, const std::vector<Option>& options, const std::vector<Answer>& correctAnswers, const std::string& explanation);
    };
}