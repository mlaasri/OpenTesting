/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#pragma once

#include <string>
#include <vector>

#include "question/Question.h"

namespace OT
{
    /**
    * \struct MultipleChoiceQuestion MultipleChoiceQuestion.h
    * A type of Question where multiple options to choose from can be presented to
    * the examinee.
    * 
    * Options are encoded as strings and organized into OptionGroup objects. An
    * OptionGroup is a collection of options that belong together and that are meant
    * to be presented together to the examinee. It is useful for cases where the
    * examinee must select multiple options from multiple lists (for example when
    * the examinee must fill in multiple blanks), but one can always manage and
    * display options as they desire. In its simplest form, a MultipleChoiceQuestion
    * can have one single OptionGroup containing all the options necessary for the
    * question.
    */
    struct MultipleChoiceQuestion :
        public Question
    {
        /**
        * \struct OptionGroup MultipleChoiceQuestion.h
        * A container of options.
        */
        struct OptionGroup
        {
            /**
            * An optional title for the OptionGroup that can be displayed to the
            * examinee. For example, if the MultipleChoiceQuestion consists in
            * filling multiple blanks and each blank has its own list of options,
            * the title can map the options back to the blank they correspond to.
            */
            std::string title;

            /**
            * The options contained in the OptionGroup. Options are encoded as
            * strings.
            */
            std::vector<std::string> options;
        };

        /** The option groups to present to the examinee */
        std::vector<OptionGroup> optionGroups;

        /** Builds an empty MultipleChoiceQuestion */
        MultipleChoiceQuestion();

        /**
        * Builds a MultipleChoiceQuestion with a single correct answer and some
        * options to choose from, organized into option groups.
        * @param[in] prompt The prompt to show the examinee.
        * @param[in] optionGroups The options for the examinee to choose from,
        *   organized into OptionGroup objects.
        * @param[in] correctAnswer The correct answer to the Question.
        * @param[in] explanation The reason why the correct answer is the one given.
        */
        MultipleChoiceQuestion(const std::string& prompt, const std::vector<OptionGroup>& optionGroups, const Answer& correctAnswer, const std::string& explanation);

        /**
        * Builds a MultipleChoiceQuestion with multiple correct answers and some
        * options to choose from.
        * @param[in] prompt The prompt to show the examinee.
        * @param[in] optionGroups The options for the examinee to choose from,
        *   organized into OptionGroup objects.
        * @param[in] correctAnswers The correct answers to the Question.
        * @param[in] explanation The reason why the correct answers are the ones
        *   given.
        */
        MultipleChoiceQuestion(const std::string& prompt, const std::vector<OptionGroup>& optionGroups, const std::vector<Answer>& correctAnswers, const std::string& explanation);
    };
}