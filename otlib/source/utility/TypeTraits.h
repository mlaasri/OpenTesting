/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#pragma once

#include <memory>
#include <vector>
#include <type_traits>

namespace OT
{
    /**
    * \class TypeTraits TypeTraits.h
    * A utility class for retrieving type traits.
    */
    class TypeTraits
    {
    public:

        /**
        * The TypeTraits class has no constructor since all its content is static
        * and meant to be used without a TypeTraits object.
        */
        TypeTraits() = delete;

        /**
        * The default type trait for indicating whether a type is an
        * std::unique_ptr. Its internal value is a boolean that is equal to false
        * since, by default, a type is not a unique pointer.
        */
        template<typename NonUniquePtrType>
        struct isUniquePtr
        {
            /**
            * The value of the type trait, which is equal to false since, by
            * default, a type is not a unique pointer.
            */
            static const bool value = false;
        };

        /**
        * The specialized type trait for indicating whether a type is an
        * std::unique_ptr. Its internal value is a boolean that is equal to true
        * since the specialized type is an std::unique_ptr.
        */
        template<class UniquePtrValueType, typename UniquePtrDeleterType>
        struct isUniquePtr<std::unique_ptr<UniquePtrValueType, UniquePtrDeleterType>>
        {
            /**
            * The value of the type trait, which is equal to true since the
            * specialized type is an std::unique_ptr.
            */
            static const bool value = true;
        };

        /**
        * The default type trait for indicating whether a type is an std::vector
        * container. Its internal value is a boolean that is equal to false since,
        * by default, a type is not a vector.
        */
        template<class NonVectorType>
        struct isVector
        {
            /**
            * The value of the type trait, which is equal to false since, by
            * default, a type is not a vector.
            */
            static const bool value = false;
        };

        /**
        * The specialized type trait for indicating whether a type is an std::vector
        * container. Its internal value is a boolean that is equal to true since the
        * specialized type is an std::vector.
        */
        template<class VectorValueType, typename VectorAllocatorType>
        struct isVector<std::vector<VectorValueType, VectorAllocatorType>>
        {
            /**
            * The value of the type trait, which is equal to true since the
            * specialized type is an std::vector.
            */
            static const bool value = true;
        };

        /**
        * The default type trait for indicating whether a type is an std::vector
        * of a particular type of objects or a derived class from that type. Its
        * internal value is a boolean that is equal to false since, by default, a
        * type does not match this criteria.
        */
        template<class NonVectorType, class BaseType>
        struct isVectorOfDerived
        {
            /**
            * The value of the type trait, which is equal to false since, by
            * default, a type does not match the desired criteria.
            */
            static const bool value = false;
        };

        /**
        * The specialized type trait for indicating whether a type is an std::vector
        * of a particular type of objects or a derived class from that type. Its
        * internal value is a boolean that evaluates if elements in the given vector
        * type derive from the given base type.
        */
        template<class VectorValueType, typename VectorAllocatorType, class BaseType>
        struct isVectorOfDerived<std::vector<VectorValueType, VectorAllocatorType>, BaseType>
        {
            /**
            * The value of the type trait, which is equal to true if and only if the
            * given type is an std::vector whose value type derives from the given
            * base type.
            */
            static const bool value = std::is_base_of<BaseType, VectorValueType>::value;
        };
    };
}