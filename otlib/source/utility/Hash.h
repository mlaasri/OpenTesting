/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2022, mlaasri
**
***********************************************************************/

#pragma once

#include <string>

#include "serialization/Serializable.h"

namespace OT
{
    /**
    * \class Hash Hash.h
    * A utility class for hashing objects.
    * 
    * The Hash class supports the following hash functions:
    * - **DJBX33A**, which stands for "Daniel J. Bernstein, Times 33 with Addition",
    *   is a non-cryptographic hash function that prioritizes speed over quality. It
    *   is very fast to compute and produces hashes over a reasonable distribution,
    *   but it is not as secure as a cryptographic hash function.
    */
    class Hash
    {
    public:

        /**
        * The Hash class has no constructor since all its methods are static and
        * meant to be used without a Hash object.
        */
        Hash() = delete;

        /**
        * Hashes the given string with the DJBX33A hash function.
        * 
        * Note that the DJBX33A hash function is meant to be used when speed is the
        * highest priority and the quality of the generated hashes is a lesser
        * concern. For other options, see the top-level documentation of the Hash
        * class.
        * @param[in] stringToHash The string to hash.
        */
        size_t DJBX33A(const std::string& stringToHash);

        /**
        * Hashes the given Serializable object with the DJBX33A hash function.
        * 
        * This method first serializes the given object and then call the DJBX33A
        * hash function on the resulting string.
        * 
        * Note that the DJBX33A hash function is meant to be used when speed is the
        * highest priority and the quality of the generated hashes is a lesser
        * concern. For other options, see the top-level documentation of the Hash
        * class.
        * @param[in] serializable The Serializable object to hash.
        */
        size_t DJBX33A(const Serializable& serializable);
    };
}