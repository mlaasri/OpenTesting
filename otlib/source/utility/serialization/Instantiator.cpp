/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2022, mlaasri
**
***********************************************************************/

#include <memory>
#include <stdexcept>

#include "Instantiator.h"
#include "../../core/questiongenerators/units/BlankUnit.h"
#include "../../core/questiongenerators/units/ExplanationCompletionUnit.h"
#include "../../core/questiongenerators/units/OptionSelectionUnit.h"
#include "../../core/questiongenerators/units/PromptInitializationUnit.h"
#include "../../core/questiongenerators/units/TokenReplacementUnit.h"

/*
* We define a handy macro for testing if a candidate type matches a supported type
* and for creating a new instance if so.
*/
#define OPENTESTING_INSTANTIATOR_TRY(candidateType, supportedType) if (candidateType == #supportedType) return std::make_unique<supportedType>()

std::unique_ptr<OT::Serializable> OT::Instantiator::instantiate(const std::string& typeName)
{
    /* We try every supported type */
    OPENTESTING_INSTANTIATOR_TRY(typeName, BlankUnit);
    OPENTESTING_INSTANTIATOR_TRY(typeName, ExplanationCompletionUnit);
    OPENTESTING_INSTANTIATOR_TRY(typeName, OptionSelectionUnit);
    OPENTESTING_INSTANTIATOR_TRY(typeName, PromptInitializationUnit);
    OPENTESTING_INSTANTIATOR_TRY(typeName, TokenReplacementUnit);

    /*
    * If the type does not correspond to a supported class, we throw an exception.
    */
    throw std::invalid_argument("Unsupported type: Instantiator cannot instantiate an object of type '" + typeName + "'.");
}
