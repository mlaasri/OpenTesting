/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2022, mlaasri
**
***********************************************************************/

#pragma once

#include <memory>
#include <string>
#include <typeinfo>

#include "Serializable.h"

namespace OT
{
    /**
    * \class Instantiator Instantiator.h
    * A utility class for instantiating Serializable objects from their type name.
    * 
    * The Instantiator class supports all OpenTesting Factory::Unit types, including
    * WrapperUnit for which a dedicated function must be used.
    * 
    * Behind the scenes, the Instantiator class uses a combination of macros to test
    * for all valid type names and relies on compiler optimization for speed.
    */
    class Instantiator
    {
    public:

        /**
        * The Instantiator class has no constructor since all its methods are static
        * and meant to be used without an Instantiator object.
        */
        Instantiator() = delete;

        /**
        * Creates a new, empty instance of the given unit type. The unit type must
        * be one of the supported classes; otherwise, an invalid argument exception
        * is thrown.
        * 
        * Supported unit types for this method are all Factory::Unit classes except
        * the WrapperUnit class. To instantiate a WrapperUnit, use the
        * instantiateWrapperUnit() method instead.
        * @param[in] unitType The name of the unit type to instantiate. It must
        *   correspond to a supported class; otherwise, an invalid exception will be
        *   thrown.
        */
        static std::unique_ptr<Serializable> instantiateUnit(const std::string& unitType);

        /**
        * Creates a new, empty WrapperUnit instance capable of wrapping a
        * Factory::Unit of the given type into a Factory with the given object type.
        * The unit type must be one of the supported classes; otherwise, an invalid
        * argument exception is thrown.
        *
        * Supported unit types for the internal unit are all Factory::Unit classes
        * except the WrapperUnit class itself. Supported object types are all the
        * object types of each of these units.
        * @param[in] internalUnitType The name of the internal unit type. It must
        *   correspond to a supported class; otherwise, an invalid exception will be
        *   thrown.
        * @param[in] derivedObjectTypeInfo A type_info object identifying the
        *   WrapperUnit's derived object type. It must correspond to a supported
        *   object type which must derive from the internal unit's object type;
        *   otherwise, an invalid exception will be thrown.
        */
        static std::unique_ptr<Serializable> instantiateWrapperUnit(const std::string& internalUnitType, const std::type_info& derivedObjectTypeInfo);

    private:

        /**
        * \class WrapperUnitExceptionThrower Instantiator.cpp
        * A utility object that throws an invalid argument exception upon creation.
        *
        * The sole purpose of this class is to interact with the macro logic used
        * behind the scenes of the Instantiator class. More precisely, it serves as
        * a possible return type in the Instantiator::instantiateWrapperUnit()
        * method when incompatible object types are requested for building a
        * WrapperUnit (hence the name of the class). If incompatible types are
        * requested, then the method will attempt to instantiate this class, which
        * will result in an exception being thrown.
        */
        class WrapperUnitExceptionThrower :
            public Serializable
        {
        public:

            /** Throws an invalid argument exception. */
            WrapperUnitExceptionThrower();

            /**
            * This method has no effect and returns immediately. It is only defined
            * here because it is required by Serializable.
            * @param[out] writer A Writer object. It will be left untouched.
            */
            void serialize(Writer& writer) const override {}

            /**
            * This method has no effect and returns immediately. It is only defined
            * here because it is required by Serializable.
            * @param[in] reader A Reader object.
            */
            void deserialize(const Reader& reader) override {}
        };
    };
}