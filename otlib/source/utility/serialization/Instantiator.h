/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2022, mlaasri
**
***********************************************************************/

#pragma once

#include <memory>
#include <string>

namespace OT
{
    /* Forward declaration of the Serializable class */
    class Serializable;

    /**
    * \class Instantiator Instantiator.h
    * A utility class for instantiating Serializable objects from their type name.
    */
    class Instantiator
    {
    public:

        /**
        * The Instantiator class has no constructor since all its methods are static
        * and meant to be used without an Instantiator object.
        */
        Instantiator() = delete;

        /**
        * Creates a new, empty instance of the given class. The class must be one of
        * the supported types; otherwise, an invalid argument exception is thrown.
        * 
        * Supported classes are all Unit classes except the WrapperUnit class.
        * @param[in] typeName The name of the class to instantiate. It must
        *   correspond to a supported class; otherwise, an invalid exception will be
        *   thrown.
        */
        static std::unique_ptr<Serializable> instantiate(const std::string& typeName);
    };
}