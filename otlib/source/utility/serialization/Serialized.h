/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2022, mlaasri
**
***********************************************************************/

#pragma once

#include <string>

#include "../../dependencies/nlohmann-json/single_include/nlohmann/json.hpp"

namespace OT
{
    /**
    * \struct Serialized Writer.h
    * A Serialized object is a container of serialized data. It stores data in the
    * form of key-value pairs and handles complex objects by nesting them into a
    * tree-like structure.
    *
    * Internally, a Serialized object simply wraps a JSON object from the [JSON for
    * Modern C++ library](https://github.com/nlohmann/json) and stores it as the
    * root of its tree-like structure.
    */
    struct Serialized
    {
        /**
        * A JSON object from the [JSON for Modern C++ library]
        * (https://github.com/nlohmann/json) that serves as a root for the
        * Serialized object's tree-like structure.
        */
        nlohmann::json data;

        /** Creates an empty Serialized object. */
        Serialized();

        /**
        * Creates a Serialized object from the given string representation.
        * @param[in] source The string representation of the Serialized object to
        *   create. The string should be generated by the Writer::toString() method
        *   of a Writer.
        */
        Serialized(const std::string& source);
    };
}