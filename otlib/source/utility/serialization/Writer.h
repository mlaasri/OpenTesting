/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2022, mlaasri
**
***********************************************************************/

#pragma once

#include <memory>
#include <string>
#include <vector>
#include <algorithm>

namespace OT
{
    /* Forward declaration of the Serialized struct */
    struct Serialized;

    /* Forward declaration of the Bucket class */
    template<class ObjectType>
    class Bucket;

    /* Forward declaration of the Serializable class */
    class Serializable;

    /**
    * \class Writer Writer.h
    * A Writer is an object that serializes data of different types and stores the
    * result into an internal Serialized object.
    * 
    * A Writer writes data in the form of key-value pairs where the key must be a
    * string and the value can be any supported object type or data structure (see
    * the signature of all the write() methods for a list of all supported types).
    * Each key must be unique within the scope of the Writer so the data it refers
    * to can be retrieved later with it.
    */
    class Writer
    {
    public:

        /** Creates a new, empty Serialized object and a Writer for it. */
        Writer();

        /** Destroys the Writer and its internal Serialized object. */
        ~Writer();

        /**
        * Serializes the given boolean and stores the result in the internal
        * Serialized object using the given key.
        * @param[in] key The key to use for identifying the serialized data in the
        *   internal Serialized object. If the Writer already wrote a value with
        *   this key before, the previous value will be erased and replaced with the
        *   new serialized data.
        * @param[in] value The boolean to serialize.
        */
        void write(const std::string& key, bool value);

        /**
        * Serializes the given unsigned integer and stores the result in the
        * internal Serialized object using the given key.
        * @param[in] key The key to use for identifying the serialized data in the
        *   internal Serialized object. If the Writer already wrote a value with
        *   this key before, the previous value will be erased and replaced with the
        *   new serialized data.
        * @param[in] value The unsigned integer to serialize.
        */
        void write(const std::string& key, size_t value);

        /**
        * Serializes the given string and stores the result in the internal
        * Serialized object using the given key.
        * @param[in] key The key to use for identifying the serialized data in the
        *   internal Serialized object. If the Writer already wrote a value with
        *   this key before, the previous value will be erased and replaced with the
        *   new serialized data.
        * @param[in] value The string to serialize.
        */
        void write(const std::string& key, const std::string& value);

        /**
        * Serializes the given vector of strings and stores the result in the
        * internal Serialized object using the given key.
        * @param[in] key The key to use for identifying the serialized data in the
        *   internal Serialized object. If the Writer already wrote a value with
        *   this key before, the previous value will be erased and replaced with the
        *   new serialized data.
        * @param[in] values The vector of strings to serialize.
        */
        void write(const std::string& key, const std::vector<std::string>& values);

        /**
        * Serializes the given Bucket of strings and stores the result in the
        * internal Serialized object using the given key.
        * @param[in] key The key to use for identifying the serialized data in the
        *   internal Serialized object. If the Writer already wrote a value with
        *   this key before, the previous value will be erased and replaced with the
        *   new serialized data.
        * @param[in] bucket The Bucket of strings to serialize.
        */
        void write(const std::string& key, const Bucket<std::string>& bucket);

        /**
        * Serializes the given Serializable object and stores the result in the
        * internal Serialized object using the given key. The Writer serializes the
        * object by calling its Serializable::serialize() method and passing itself
        * as the writer argument.
        * @param[in] key The key to use for identifying the serialized data in the
        *   internal Serialized object. If the Writer already wrote a value with
        *   this key before, the previous value will be erased and replaced with the
        *   new serialized data.
        * @param[in] serializable The object to serialize.
        */
        void write(const std::string& key, const Serializable& serializable);

        /**
        * Serializes the given vector of objects and stores the result in the
        * internal Serialized object using the given key. Each object in the vector
        * must derive from the Serializable class. The Writer serializes each object
        * individually by calling its Serializable::serialize() method and passing
        * itself as the writer argument.
        * @param[in] key The key to use for identifying the serialized data in the
        *   internal Serialized object. If the Writer already wrote a value with
        *   this key before, the previous value will be erased and replaced with the
        *   new serialized data.
        * @param[in] serializables The vector of objects to serialize.
        */
        template<class SerializableType>
        void write(const std::string& key, const std::vector<SerializableType>& serializables);

        /**
        * Converts all the serialized data from the internal Serialized object into
        * a string and returns it. The returned string can later be used for
        * deserialization.
        * @param[in] compact Whether to return the shortest possible string or add
        *   indentation and new lines to make it more human-readable.
        */
        std::string toString(bool compact = true) const;

    protected:

        /** Returns the internal Serialized object. */
        const std::unique_ptr<Serialized>& getSerialized() const;

    private:

        /**
        * Serializes the given vector of object pointers and stores the result in
        * the internal Serialized object using the given key. The Writer serializes
        * each object individually by calling its Serializable::serialize() method
        * and passing itself as the writer argument.
        * 
        * This method is a helper function for implementing the similar but
        * templated function for serializing vector of objects.
        * @param[in] key The key to use for identifying the serialized data in the
        *   internal Serialized object. If the Writer already wrote a value with
        *   this key before, the previous value will be erased and replaced with the
        *   new serialized data.
        * @param[in] serializables The vector of objects to serialize.
        */
        void write(const std::string& key, const std::vector<const Serializable*>& serializables);

        /** The internal Serialized object */
        std::unique_ptr<Serialized> m_serialized;
    };

    template<class SerializableType>
    inline void Writer::write(const std::string& key, const std::vector<SerializableType>& serializables)
    {
        /*
        * We simply convert the vector of objects into a vector of object pointers
        * and call the private helper method on it.
        */
        std::vector<const Serializable*> pointers(serializables.size());
        std::transform(serializables.cbegin(), serializables.cend(), pointers.begin(), [](const auto& serializable) { return &serializable; });
        write(key, pointers);
    }
}