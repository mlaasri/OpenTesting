/***********************************************************************
**
** This file is part of OpenTesting, an open-source framework for
** designing standardized tests and informal quizzes.
**
** OpenTesting is free software: you can redistribute it and / or
** modify it under the terms of the GNU General Public License as
** published by the Free Software Foundation, either version 3 of the
** License, or (at your option) any later version.
**
** OpenTesting is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with OpenTesting. If not, see <https://www.gnu.org/licenses/>.
**
** Copyright(C) 2023, mlaasri
**
***********************************************************************/

#pragma once

#include <string>
#include <vector>

namespace OT
{
    /**
    * \class String String.h
    * A utility class for manipulating strings.
    */
    class String
    {
    public:

        /**
        * The String class has no constructor since all its methods are static and
        * meant to be used without a String object.
        */
        String() = delete;

        /**
        * Splits the given string at any occurrence of the given delimiter.
        * @param[in] string The string to split.
        * @param[in] delimiter The delimiter.
        */
        static std::vector<std::string> split(const std::string& string, char delimiter);

        /**
        * Replaces all occurrences of a substring with another.
        * @param[in] string The string to make the replacement in.
        * @param[in] from The substring to replace.
        * @param[in] to The substring to make the replacement with.
        */
        static std::string& replaceAll(std::string& string, const std::string& from, const std::string& to);

        /**
        * Removes all occurrences of the given character in the given string.
        * @param[in] string The string to remove the character from.
        * @param[in] character The character to remove.
        */
        static std::string& removeAll(std::string& string, char character);

        /**
        * Removes any space at the beginning or end of the given string.
        * 
        * The following characters are considered a space: the usual space
        * character, the tabulation character, the newline character, the vertical
        * tabulation character, the form feed character, and the carriage return
        * character.
        * @param[in] string The string to trim.
        */
        static std::string& trim(std::string& string);

        /**
        * Removes any space at the beginning of the given string.
        *
        * The following characters are considered a space: the usual space
        * character, the tabulation character, the newline character, the vertical
        * tabulation character, the form feed character, and the carriage return
        * character.
        * @param[in] string The string to trim.
        */
        static std::string& trimLeft(std::string& string);

        /**
        * Removes any space at the end of the given string.
        *
        * The following characters are considered a space: the usual space
        * character, the tabulation character, the newline character, the vertical
        * tabulation character, the form feed character, and the carriage return
        * character.
        * @param[in] string The string to trim.
        */
        static std::string& trimRight(std::string& string);

        /**
        * Returns true if the given string starts with the given substring and false
        * otherwise.
        * @param[in] string The string where to look for the substring.
        * @param[in] substring The string to look for.
        */
        static bool startsWith(const std::string& string, const std::string& substring);

        /**
        * Returns true if the given string ends with the given substring and false
        * otherwise.
        * @param[in] string The string where to look for the substring.
        * @param[in] substring The string to look for.
        */
        static bool endsWith(const std::string& string, const std::string& substring);

        /**
        * Returns true if the given string contains the given substring and false
        * otherwise.
        * @param[in] string The string where to look for the substring.
        * @param[in] substring The string to look for.
        */
        static bool contains(const std::string& string, const std::string& substring);

        /**
        * Returns true if the given string contains the given character and false
        * otherwise.
        * @param[in] string The string where to look for the character.
        * @param[in] character The character to look for.
        */
        static bool contains(const std::string& string, char character);
    };
}